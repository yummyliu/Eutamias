// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RpcService.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NinfoReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NinfoReq) Reset()                    { *m = NinfoReq{} }
func (m *NinfoReq) String() string            { return proto.CompactTextString(m) }
func (*NinfoReq) ProtoMessage()               {}
func (*NinfoReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *NinfoReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NinfoRsp struct {
	Id    uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nip   string     `protobuf:"bytes,2,opt,name=Nip" json:"Nip,omitempty"`
	Nport uint64     `protobuf:"varint,3,opt,name=Nport" json:"Nport,omitempty"`
	Rc    ResultCode `protobuf:"varint,4,opt,name=rc,enum=rpc.ResultCode" json:"rc,omitempty"`
}

func (m *NinfoRsp) Reset()                    { *m = NinfoRsp{} }
func (m *NinfoRsp) String() string            { return proto.CompactTextString(m) }
func (*NinfoRsp) ProtoMessage()               {}
func (*NinfoRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *NinfoRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NinfoRsp) GetNip() string {
	if m != nil {
		return m.Nip
	}
	return ""
}

func (m *NinfoRsp) GetNport() uint64 {
	if m != nil {
		return m.Nport
	}
	return 0
}

func (m *NinfoRsp) GetRc() ResultCode {
	if m != nil {
		return m.Rc
	}
	return ResultCode_RC_DEFAULT
}

func init() {
	proto.RegisterType((*NinfoReq)(nil), "rpc.NinfoReq")
	proto.RegisterType((*NinfoRsp)(nil), "rpc.NinfoRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DService service

type DServiceClient interface {
	// Sends a greeting
	GetMyNserver(ctx context.Context, in *NinfoReq, opts ...grpc.CallOption) (*NinfoRsp, error)
}

type dServiceClient struct {
	cc *grpc.ClientConn
}

func NewDServiceClient(cc *grpc.ClientConn) DServiceClient {
	return &dServiceClient{cc}
}

func (c *dServiceClient) GetMyNserver(ctx context.Context, in *NinfoReq, opts ...grpc.CallOption) (*NinfoRsp, error) {
	out := new(NinfoRsp)
	err := grpc.Invoke(ctx, "/rpc.DService/GetMyNserver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DService service

type DServiceServer interface {
	// Sends a greeting
	GetMyNserver(context.Context, *NinfoReq) (*NinfoRsp, error)
}

func RegisterDServiceServer(s *grpc.Server, srv DServiceServer) {
	s.RegisterService(&_DService_serviceDesc, srv)
}

func _DService_GetMyNserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NinfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DServiceServer).GetMyNserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DService/GetMyNserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DServiceServer).GetMyNserver(ctx, req.(*NinfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DService",
	HandlerType: (*DServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyNserver",
			Handler:    _DService_GetMyNserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RpcService.proto",
}

func init() { proto.RegisterFile("RpcService.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x31, 0x4b, 0xc6, 0x30,
	0x10, 0x86, 0x4d, 0xfa, 0x29, 0x9f, 0x87, 0xd6, 0x12, 0x1c, 0x42, 0x17, 0x4b, 0xa7, 0x4e, 0x19,
	0xea, 0xe6, 0xa8, 0x05, 0x27, 0x33, 0xc4, 0x5f, 0xa0, 0xe9, 0x15, 0x02, 0xd2, 0x9c, 0x97, 0x58,
	0xf0, 0xdf, 0x8b, 0xb5, 0x05, 0xf9, 0xb6, 0x7b, 0xef, 0xb9, 0x83, 0xe7, 0x85, 0xca, 0x91, 0x7f,
	0x45, 0x5e, 0x82, 0x47, 0x43, 0x1c, 0x73, 0x54, 0x05, 0x93, 0xaf, 0xab, 0xc7, 0xb7, 0x84, 0x03,
	0x4e, 0x61, 0xde, 0xd6, 0x6d, 0x0d, 0x47, 0x1b, 0xe6, 0x29, 0x3a, 0xfc, 0x54, 0x25, 0xc8, 0x30,
	0x6a, 0xd1, 0x88, 0xee, 0xe0, 0x64, 0x18, 0x5b, 0xbf, 0xb3, 0x44, 0xa7, 0x4c, 0x55, 0x50, 0xd8,
	0x40, 0x5a, 0x36, 0xa2, 0xbb, 0x74, 0xbf, 0xa3, 0xba, 0x85, 0x73, 0x4b, 0x91, 0xb3, 0x2e, 0xd6,
	0xa3, 0xbf, 0xa0, 0xee, 0x40, 0xb2, 0xd7, 0x87, 0x46, 0x74, 0x65, 0x7f, 0x63, 0x98, 0xbc, 0x71,
	0x98, 0xbe, 0x3e, 0xf2, 0x53, 0x1c, 0xd1, 0x49, 0xf6, 0xfd, 0x03, 0x1c, 0x87, 0xcd, 0x54, 0x19,
	0xb8, 0x7a, 0xc6, 0xfc, 0xf2, 0x6d, 0x13, 0xf2, 0x82, 0xac, 0xae, 0xd7, 0x87, 0xdd, 0xaf, 0xfe,
	0x1f, 0x13, 0xb5, 0x67, 0xef, 0x17, 0x6b, 0x87, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16,
	0xb0, 0x2e, 0x1b, 0xee, 0x00, 0x00, 0x00,
}
